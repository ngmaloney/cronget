<?php

/**
 * @file
 * Utility used to retrieve remote HTML,XML,RSS or JSON data.
 */

 // Global Variable Declarations //
 define('CRONGET_NODETYPE', 'cronget');

/**
 * Implementation of hook_help().
 */
function cronget_help($section) {
  $output = '';
  switch ($section) {
    case 'admin/help#cronget':
      $output = '<p>'. t('Cronget is a simple utility for retrieving data from a remote URL and storing it in a table. It is usefull for storing HTML,XML,JSON, etc.') .'</p>';
    break;
    case 'admin/content/cronget':
      $output = '<p>'. t("Cronget is a helper utility that allows remote data to be retrieved and stored via the Drupal cron process. It's primary use would be to fetch remote data and store it as node content.") .'</p>';
    break;
    case 'admin/content/cronget/add/job':
      $output = '<p>'. t("Add a remote http URL to retrieve. Cronget will store the results as a text string.") .'</p>';
    break;
  }
  return $output;
}

/**
 * Implementation of hook_menu().
 */
function cronget_menu() {
  $items = array();
  // Menu entry for adding cronget jobs
  $items['admin/content/cronget'] = array(
    'title' => t('Cronget Jobs'),
    'description' => t("Configure cronget, a remote data retrieval module."),
    'page callback' => 'cronget_admin_overview',
    'access arguments' => array('administer cronget'),
    'file' => 'cronget.admin.inc',
  );
  $items['admin/content/cronget/list'] = array(
    'title' => t("List"),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'description' => t("Create a listing of cronget jobs."),
    'weight' => -10,
  );
  $items['admin/content/cronget/add'] = array(
    'title' => t("Add job"),
    'description' => t("Create a cronget job."),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cronget_form_job'),
    'access arguments' => array('create cronget jobs'),
    'file' => 'cronget.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/content/cronget/edit/%cronget_job'] = array(
    'title' => t("Edit job"),
    'description' => t("Edit a cronget job."),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cronget_form_job', 4),
    'access arguments' => array('edit cronget jobs'),
    'file' => 'cronget.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/content/cronget/delete/%cronget_job'] = array(
    'title' => t("Delete job"),
    'description' => t("Delete a cronget job."),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cronget_form_delete', 4),
    'access arguments' => array('delete cronget jobs'),
    'file' => 'cronget.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/content/cronget/refresh/%cronget_job'] = array(
    'title' => t("Refresh job"),
    'description' => t("Refresh a cronget job."),
    'page callback' => 'cronget_refresh',
    'page arguments' => array(4),
    'access arguments' => array('refresh cronget jobs'),
    'file' => 'cronget.admin.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_perm()
**/
function cronget_perm() {
  return array(
    'administer cronget',
    'create cronget jobs',
    'edit own cronget jobs',
    'access cronget'
  );
}

/**
 * Implementation of hook_access
 */
function cronget_access($op, $node, $account) {
  switch ($op) {
    case 'create':
      // Anonymous users cannot post even if they have the permission.
      return user_access('create cronget jobs', $account) && $account->uid ? TRUE : NULL;
    case 'update':
      return user_access('edit own cronget jobs', $account) && ($node->uid == $account->uid) ? TRUE : NULL;
    case 'delete':
      return user_access('edit own cronget jobs', $account) && ($node->uid == $account->uid) ? TRUE : NULL;
  }
}

/**
 * Include Node Functionality
**/
require_once('cronget.node.inc');

/**
 * Implementation of hook_cron().
 *
 * Retrieves cronget jobs based on interval.
 */
function cronget_cron() {
  $result = db_query('SELECT * FROM {cronget_jobs} WHERE checked + refresh < %d', time());
  while ($job = db_fetch_array($result)) {
    cronget_refresh($job,TRUE);
  }
}

/**
 * Refreshes a cronget job
 *
 * Retrieves cronget jobs based on interval.
 *
 * @param $job -
 * An array representing the job to refresh
 * @param $cron
 * Boolean flagging whether job was triggered via cron
 */
function cronget_refresh($job, $cron = false) {
    //TODO: Add some kind of trigger/action hook
    $result = drupal_http_request($job['url']);
    $data = array();
    $data['jid'] = $job['jid'];
    $data['content'] = trim($result->data);
    $data['timestamp'] = time();
    $data['type'] = $job['type'];
    $data['uid'] = $job['uid'];
    $data['title'] = $job['title'];
    $saveas = explode(',', $job['saveas']);
    // Process HTTP response code.
    switch ($result->code) {
      case 200:
      case 302:
      case 307:
        cronget_nodehandler($job, $data);
      break;
      //Log as error if correct HTTP code not received
      default:
        watchdog('cronget', 'Received a http code of '. $result->code .' for cronget job '. $data['jid']);
      break;
    }
    // Process Cronjob Callback
    if ($job['callback'] != '') {
      try {
         $callback_content = drupal_eval('<?php $data = '. var_export($data, TRUE).'; ' . $job['callback'] . '?>');
         if ($callback_content) {
           $data['content'] = $callback_content;
           cronget_save_data($data);
         }
      }
      catch (Exception $e) {
        watchdog('cronget', 'Cronget callback JID: '. $data['jid'] .' through an exception. Exception: '. $e->getMessage());
        return;
      }
    }
    watchdog('cronget', 'Cronget job: '. $job['jid'] . 'successfully run.');
    if($cron) {
      return TRUE;
    }
    else {
      drupal_set_message("Job ". $job['title'] . ' successfully refreshed.');
      drupal_goto('admin/content/cronget');
    }
}

/** DATABASE FUNCTIONS **/

/**
 * Function to get an array of cronget jobs
 * @param $user
 * User object to get jobs by
**/
function cronget_get_jobs($user = FALSE) {
    if (!$user || $user->uid = 1) {
      $query = db_query('SELECT * FROM {cronget_jobs} j ORDER BY Title ASC');
    }
    if ($user->uid > 1) {
      $query = db_query('SELECT * from {cronget_jobs} WHERE uid = %d',$user->uid);
    }
    $rows = array();
    while ($row = db_fetch_object($query)) {
      $rows[] = $row;
    }
    return $rows;
}


/**
 * Load the data for a single contact category.
 */
function cronget_job_load($jid) {
  $job = db_fetch_array(db_query("SELECT * FROM {cronget_jobs} WHERE jid = %d", $jid));
  return empty($job) ? FALSE : $job;
}

/**
 * Function for saving a cronget data row
 * @param $data
 * An array representing the cron_get job to save.
 *
 *
 **/
function cronget_save_data($data) {
  $type = $data['type'];
  //Set a default timestamp if needed
  if (!isset($data['timestamp'])) {
    $data['timestamp'] = time();
  }
  //See if there is a row in database, ifso update
  $result = db_result(db_query("SELECT count(did) FROM {cronget_data} WHERE jid = %d",$data['jid']));
  if ($result > 0 && $type != 'streaming') {
    db_query("UPDATE {cronget_data} SET content = '%s',timestamp = %d WHERE jid = %d",$data['content'],$data['timestamp'],$data['jid']);
    //watchdog('cronget', t('data of job: %jid type: %type updated',array('%jid' => $data['jid'], '%type' => $data['type'])));
  }
  else {
    db_query("INSERT INTO {cronget_data} (jid,content,timestamp) VALUES(%d,'%s',%d)",$data['jid'],$data['content'],$data['timestamp']);
    //watchdog('cronget', t('data of job: %jid type: %type inserted',array('%jid' => $data['jid'], '%type' => $data['type'])));
  }
}

/** Database Functions **/
/**
 * Function for adding/saving a cronget job
 *
 * @param $job
 * An array representing the cron_get job to save
 **/
function cronget_save_job($form_state) {
  //Perform SQL Operations
  if ($form_state['values']['jid']) {
    db_query("UPDATE {cronget_jobs} SET title = '%s', url = '%s', uid = '%d', type = '%s', description = '%s', refresh = %d, callback = '%s' WHERE jid = %d",$form_state['values']['title'],$form_state['values']['url'],$form_state['values']['uid'],$form_state['values']['type'],$form_state['values']['description'],$form_state['values']['refresh'],$form_state['values']['callback'],$form_state['values']['jid']);
    watchdog('cronget', t('job %jid updated.', array('%jid' => $form_state['values']['jid'])));
  }
  else {
    db_query("INSERT INTO {cronget_jobs} (title,url,uid,type,description,refresh,callback) VALUES('%s','%s',%d,'%s','%s',%d,'%s')",$form_state['values']['title'],$form_state['values']['url'],$form_state['values']['uid'],$form_state['values']['type'],$form_state['values']['description'],$form_state['values']['refresh'],$form_state['values']['callback']);
    watchdog('cronget', t('job %jid inserted.', array('%jid' => $form_state['values']['jid'])));
  }
}

/**
 * @file
 * Provide views data and handlers for cronget.module
 */
function cronget_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'cronget') . '/',
  );
}

/*
 * Function for deleting a cronget job
 *
 * @param  $delete
 * An array representing the cron_get job to delete
 **/
function cronget_delete_job($delete) {
  //Delete cron get node
  db_query("DELETE FROM {cronget} WHERE jid = %d",$delete['jid']);
  //Delete all data
  db_query("DELETE FROM {cronget_data} WHERE jid = %d",$delete['jid']);
  //Delete job
  db_query("DELETE FROM {cronget_jobs} WHERE jid = %d",$delete['jid']);
  watchdog('cronget', t('job %jid deleted.',array('%jid' => $delete['jid'])));
}

/**
 * Function to get all cronget jobs
 * @return array $jobs An array of cronget jobs
**/
function cronget_get_all_jobs() {
  $jobs = array();
  $results = db_query('SELECT * FROM {cronget_jobs} j ORDER BY Title ASC');
  while ($job = db_fetch_array($results)) {
    $jobs[] = $job;
  }
  return $jobs;
}
