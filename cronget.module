<?php

/**
 * @file
 * Utility used to retrieve remote HTML,XML,RSS or JSON data.
 */

 // Global Variable Declarations //
 define('CRONGET_NODETYPE', 'cronget');

/**
 * Implementation of hook_help().
 */
function cronget_help($section) {
  $output = '';
  switch ($section) {
    case 'admin/help#cronget':
      $output = '<p>'. t('Cronget is a simple utility for retrieving data from a remote URL and storing it in a table. It is usefull for storing HTML,XML,JSON, etc.') .'</p>';
    break;
    case 'admin/content/cronget':
      $output = '<p>'. t("Cronget is a helper utility that allows remote data to be retrieved and stored via the Drupal cron process. It's primary use would be to fetch remote data and store it as node (or block) content.") .'</p>';
    break;
    case 'admin/content/cronget/add/job':
      $output = '<p>'. t("Add a remote http URL to retrieve. Cronget will store the results as a text string.") .'</p>';
    break;
  }
  return $output;
}

/**
 * Implementation of hook_menu().
 */
function cronget_menu() {
  $items = array();  
  // Menu entry for adding cronget jobs
  $items['admin/content/cronget'] = array(
    'title' => t('Cronget Jobs'),
    'description' => t("Configure cronget, a remote data retrieval module."),
    'page callback' => 'cronget_admin_overview',
    'access arguments' => array('administer cronget'),
    'file' => 'cronget.admin.inc',
  );
  $items['admin/content/cronget/list'] = array(
    'title' => t("List"),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'description' => t("Create a listing of cronget jobs."),
    'weight' => -10,
  );
  $items['admin/content/cronget/add'] = array(
    'title' => t("Add job"),
    'description' => t("Create a cronget job."),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cronget_job_admin', 3),
    'access arguments' => array('create cronget jobs'),
    'file' => 'cronget.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  
  $items['admin/content/cronget/edit/%'] = array(
    'title' => 'Edit contact category',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cronget_job_admin', 3, 4),
    'access arguments' => array('edit own cronget jobs'),
    'file' => 'cronget.admin.inc',
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implementation of hook_perm()
 **/
function cronget_perm() {
  return array(
    'administer cronget',
    'create cronget jobs',
    'edit own cronget jobs',
    'access cronget');
}

/**
 * Implementation of hook_access
 */
function cronget_access($op, $node) {
  global $user;
  //TODO: Setup
}

/** Database Functions **/
/**
 * Function for adding/saving a cronget job
 *
 * @param $job
 * An array representing the cron_get job to save
 **/
function cronget_save_job($job) {
  //Perform SQL Operations
  if ($job['jid']) {
   db_query("UPDATE {cronget_jobs} SET title = '%s', url = '%s', uid = '%d', type = '%s', description = '%s', refresh = %d, callback = '%s', saveas = '%s' WHERE jid = %d",$job['title'],$job['url'],$job['uid'],$job['type'],$job['description'],$job['refresh'],$job['callback'],implode(',',array_values($job['saveas'])),$job['jid']);
   watchdog('cronget', t('job %jid updated.', array('%jid' => $job['jid'])));
  }
  else {
    db_query("INSERT INTO {cronget_jobs} (title,url,uid,type,description,refresh,callback,saveas) VALUES('%s','%s',%d,'%s','%s',%d,'%s','%s')",$job['title'],$job['url'],$job['uid'],$job['type'],$job['description'],$job['refresh'],$job['callback'],implode(',',array_values($job['saveas'])));
    watchdog('cronget', t('job %jid inserted.', array('%jid' => $job['jid'])));
  }
}

/**
 * Function for deleting a cronget job
 *
 * @param  $delete
 * An array representing the cron_get job to delete
 **/
function cronget_delete_job($delete) {
  //Delete all data
  db_query("DELETE FROM {cronget_data} WHERE jid = %d",$delete['jid']);
  //Delete job
  db_query("DELETE FROM {cronget_jobs} WHERE jid = %d",$delete['jid']);
  watchdog('cronget', t('job %jid deleted.',array('%jid' => $delete['jid'])));
}

/**
 * Load the data for a single cronget job
 */
function cronget_load($jid) {
  $job = db_fetch_array(db_query("SELECT * FROM {cronget_jobs} WHERE jid = %d", $jid));
  return empty($job) ? FALSE : $job;
}

/**
 * Function to get all cronget jobs
 * @return array $jobs An array of cronget jobs
**/
function cronget_get_all_jobs() {
  $jobs = array();
  $results = db_query('SELECT * FROM {cronget_jobs} j ORDER BY Title ASC');
  while ($job = db_fetch_array($results)) {
    $jobs[] = $job;
  }
  return $jobs;
}